apiVersion: apps/v1
kind: {{ .Values.kind.deploy }}
metadata:
  name: {{ .Values.mysql.deploy }}
  namespace: {{ .Values.mysql.deploy }}
spec:
  replicas: {{ .Values.image.replicas }}
  selector:
    matchLabels:
      app:  {{ .Values.mysql.deploy }}
  template:
    metadata:
      labels:
        app: {{ .Values.mysql.deploy }}
    spec:
      initContainers:
      - name: {{ .Values.image.name }}
        image: {{ .Values.image.mysql }}:{{ .Values.image.version }}
        command: ["/bin/sh", "-c"]
        args:
        - |
          while true; do
              if [ "$RESTORE_TRUE" = "true" ]; then
                  if [ "$MYSQL_DATABASE_RESTORE" = "{{ .Values.initScript.MYSQL_DATABASE_RESTORE }}" ]; then
                      echo "db is restoring..."
                      cp /restore/init.sql /docker-entrypoint-initdb.d
                      restore_status=$?
                      echo $?
                      echo "restore completed"
                      break
                  else
                      echo "skipping restore"
                      break
                  fi
              fi
              sleep 5
          done
        volumeMounts:
        - name: {{ .Values.volumeMountsName.mysql-data }}
          mountPath: {{ .Values.volumeMountsPath.mysql-data }}
        - name: {{ .Values.volumeMountsName.mysql-move }}
          mountPath: {{ .Values.volumeMountsPath.mysql-move }}
        - name: {{ .Values.volumeMountsName.mysql-init-script }}
          mountPath: {{ .Values.volumeMountsPath.init-script }}
        env:
        - name: {{ .Values.envName.restoreTable }}
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.envConfig.name.init }}
              key: {{ .Values.envName.restoreTable }}
        - name: {{ .Values.envName.restoreDatabase }}
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.envConfig.name.init }}
              key: {{ .Values.envName.restoreDatabase }}
        - name: {{ .Values.envName.restorePassword }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.envConfig.name.secret }}
              key: {{ .Values.envName.restorePassword }}
        - name: {{ .Values.envName.database }}
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.envConfig.name.config }}
              key: {{ .Values.envName.database }}
        - name: {{ .Values.envName.restoreBool }}
          value: {{ .Values.envConfig.bool }}

      containers:
      - name: {{ .Values.image.mysql }}
        image: {{ .Values.image.mysql }}
        env:
        - name: {{ .Values.envName.user }}
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.envConfig.config }}
              key: {{ .Values.envName.user }}
        - name: {{ .Values.envName.password }}
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.envConfig.config }}
              key: {{ .Values.envName.password }}
        - name: {{ .Values.envName.database }}
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.envConfig.config }}
              key: {{ .Values.envName.database }}
        - name: {{ .Values.envName.rootPassword }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.envConfig.secret }}
              key: {{ .Values.envName.rootPassword }}
        volumeMounts:
        - name: {{ .Values.volumeMountsName.mysql-data }}
          mountPath: {{ .Values.volumeMountsPath.mysql-data }}
        - name: {{ .Values.volumeMountsName.mysql-move }}
          mountPath: {{ .Values.volumeMountsPath.mysql-move }}

      restartPolicy: {{ .Values.image.restart }}
      volumes:
      - name: {{ .Values.volumeMountsName.mysql-data }}
        emptyDir: {}
      - name: {{ .Values.volumeMountsName.mysql-init-script }}
        configMap:
          name: {{ .Values.volumeMountsName.mysql-init-script }}
      - name: {{ .Values.volumeMountsName.mysql-move }}
        emptyDir: {}

